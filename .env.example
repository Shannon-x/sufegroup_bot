# Telegram Group Management Bot - Configuration Template
# Copy this file to .env and fill in your actual values

## Environment
NODE_ENV=production
LOG_LEVEL=info
LOG_FILE_PATH=./logs/bot.log

## Server Configuration
SERVER_HOST=0.0.0.0
SERVER_PORT=8080

## Telegram Bot Configuration
# Get your bot token from @BotFather
BOT_TOKEN=your_telegram_bot_token_here
# Bot username without @
BOT_USERNAME=your_bot_username
# Your domain for webhook (include https://)
BOT_WEBHOOK_DOMAIN=https://your-domain.com
# Generate a random webhook secret for security
BOT_WEBHOOK_SECRET=generate_random_secret_here

## Database Configuration (PostgreSQL)
# For Docker deployment, use service name; for local, use localhost
DB_HOST=postgres
DB_PORT=5432
DB_USERNAME=telegram_bot
DB_PASSWORD=your_strong_db_password
DB_DATABASE=telegram_bot

## Redis Configuration
# For Docker deployment, use service name; for local, use localhost
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password

## Security Configuration
# Generate secure random strings using: openssl rand -hex 32
JWT_SECRET=generate_random_jwt_secret_here
ENCRYPTION_KEY=generate_32_char_encryption_key_here

## Cloudflare Turnstile Configuration
# Get from Cloudflare dashboard: https://dash.cloudflare.com/
TURNSTILE_SITE_KEY=your_turnstile_site_key
TURNSTILE_SECRET_KEY=your_turnstile_secret_key

## Bot Default Settings
DEFAULT_VERIFY_TTL_MINUTES=10
DEFAULT_AUTO_ACTION=restrict
DEFAULT_RATE_LIMIT_WINDOW_MS=60000
DEFAULT_RATE_LIMIT_MAX_REQUESTS=10

## Optional: Proxy Configuration (if needed)
# HTTP_PROXY=http://proxy.example.com:8080
# HTTPS_PROXY=http://proxy.example.com:8080

# IMPORTANT NOTES:
# 1. Never commit .env file to version control
# 2. Use strong passwords for database and Redis
# 3. Generate cryptographically secure random strings for secrets
# 4. Ensure your webhook domain has valid SSL certificate
# 5. For production, always use HTTPS for webhook domain