version: '3.8'

services:
  bot:
    build: .
    container_name: telegram-group-bot
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "127.0.0.1:8080:8080"  # 只绑定到本地，通过Nginx代理
    volumes:
      - ./logs:/app/logs

  postgres:
    image: postgres:16-alpine
    container_name: telegram-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: telegram_bot
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: telegram_bot
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  bot-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: